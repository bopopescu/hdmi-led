// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module brightness_color_adj (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write,
        brightness_index_V,
        color_correct_V
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [31:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [31:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [31:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [31:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [31:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;
input  [3:0] brightness_index_V;
input  [0:0] color_correct_V;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [3:0] lut_perceptual_brigh_1_address0;
reg    lut_perceptual_brigh_1_ce0;
wire   [8:0] lut_perceptual_brigh_1_q0;
wire   [3:0] lut_perceptual_brigh_address0;
reg    lut_perceptual_brigh_ce0;
wire   [7:0] lut_perceptual_brigh_q0;
wire   [3:0] lut_perceptual_brigh_2_address0;
reg    lut_perceptual_brigh_2_ce0;
wire   [7:0] lut_perceptual_brigh_2_q0;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state5;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state11;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg    ap_block_state1;
wire   [31:0] scale_r_cast_fu_209_p1;
reg   [31:0] scale_r_cast_reg_338;
wire    ap_CS_fsm_state2;
wire   [31:0] scale_g2_cast_fu_237_p1;
reg   [31:0] scale_g2_cast_reg_343;
wire   [31:0] scale_b2_cast_fu_241_p1;
reg   [31:0] scale_b2_cast_reg_348;
wire   [0:0] exitcond4_fu_245_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] r_V_fu_251_p2;
reg   [4:0] r_V_reg_357;
wire   [5:0] c_V_fu_263_p2;
reg   [5:0] c_V_reg_365;
wire    ap_CS_fsm_state4;
reg  signed [31:0] tmp_32_reg_370;
reg    ap_block_state5;
reg  signed [31:0] tmp_33_reg_375;
reg  signed [31:0] tmp_31_reg_380;
reg   [23:0] tmp_19_reg_385;
wire    ap_CS_fsm_state8;
reg   [23:0] tmp_22_reg_390;
wire    ap_CS_fsm_state9;
reg   [23:0] tmp_25_reg_395;
wire    ap_CS_fsm_state10;
reg   [4:0] t_V_reg_180;
wire    ap_CS_fsm_state12;
reg   [5:0] t_V_3_reg_191;
reg    ap_block_state11;
wire   [63:0] tmp_fu_202_p1;
wire   [8:0] scale_g_cast2_fu_213_p1;
wire   [8:0] scale_b_cast1_fu_217_p1;
wire   [8:0] scale_g2_fu_221_p3;
wire   [8:0] scale_b2_fu_229_p3;
wire   [8:0] grp_fu_269_p1;
wire    ap_CS_fsm_state6;
wire   [8:0] grp_fu_273_p1;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_269_p2;
wire   [8:0] grp_fu_287_p1;
wire   [31:0] grp_fu_273_p2;
wire   [31:0] grp_fu_287_p2;
wire   [0:0] exitcond_fu_257_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
end

brightness_color_fYi #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lut_perceptual_brigh_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_perceptual_brigh_1_address0),
    .ce0(lut_perceptual_brigh_1_ce0),
    .q0(lut_perceptual_brigh_1_q0)
);

brightness_color_g8j #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lut_perceptual_brigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_perceptual_brigh_address0),
    .ce0(lut_perceptual_brigh_ce0),
    .q0(lut_perceptual_brigh_q0)
);

brightness_color_hbi #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lut_perceptual_brigh_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut_perceptual_brigh_2_address0),
    .ce0(lut_perceptual_brigh_2_ce0),
    .q0(lut_perceptual_brigh_2_q0)
);

hls_video_processibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
hls_video_processibs_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_32_reg_370),
    .din1(grp_fu_269_p1),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

hls_video_processibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
hls_video_processibs_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_33_reg_375),
    .din1(grp_fu_273_p1),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

hls_video_processibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
hls_video_processibs_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_31_reg_380),
    .din1(grp_fu_287_p1),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_245_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        t_V_3_reg_191 <= c_V_reg_365;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_245_p2 == 1'd0))) begin
        t_V_3_reg_191 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        t_V_reg_180 <= r_V_reg_357;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_V_reg_180 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_V_reg_365 <= c_V_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_V_reg_357 <= r_V_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        scale_b2_cast_reg_348[8 : 0] <= scale_b2_cast_fu_241_p1[8 : 0];
        scale_g2_cast_reg_343[8 : 0] <= scale_g2_cast_fu_237_p1[8 : 0];
        scale_r_cast_reg_338[8 : 0] <= scale_r_cast_fu_209_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_19_reg_385 <= {{grp_fu_269_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_22_reg_390 <= {{grp_fu_273_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_25_reg_395 <= {{grp_fu_287_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_31_reg_380 <= src_data_stream_2_V_dout;
        tmp_32_reg_370 <= src_data_stream_0_V_dout;
        tmp_33_reg_375 <= src_data_stream_1_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_245_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_245_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lut_perceptual_brigh_1_ce0 = 1'b1;
    end else begin
        lut_perceptual_brigh_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lut_perceptual_brigh_2_ce0 = 1'b1;
    end else begin
        lut_perceptual_brigh_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        lut_perceptual_brigh_ce0 = 1'b1;
    end else begin
        lut_perceptual_brigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_257_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((dst_data_stream_2_V_full_n == 1'b0) | (dst_data_stream_1_V_full_n == 1'b0) | (dst_data_stream_0_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign c_V_fu_263_p2 = (t_V_3_reg_191 + 6'd1);

assign dst_data_stream_0_V_din = $signed(tmp_19_reg_385);

assign dst_data_stream_1_V_din = $signed(tmp_22_reg_390);

assign dst_data_stream_2_V_din = $signed(tmp_25_reg_395);

assign exitcond4_fu_245_p2 = ((t_V_reg_180 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond_fu_257_p2 = ((t_V_3_reg_191 == 6'd60) ? 1'b1 : 1'b0);

assign grp_fu_269_p1 = scale_g2_cast_reg_343;

assign grp_fu_273_p1 = scale_b2_cast_reg_348;

assign grp_fu_287_p1 = scale_r_cast_reg_338;

assign lut_perceptual_brigh_1_address0 = tmp_fu_202_p1;

assign lut_perceptual_brigh_2_address0 = tmp_fu_202_p1;

assign lut_perceptual_brigh_address0 = tmp_fu_202_p1;

assign r_V_fu_251_p2 = (t_V_reg_180 + 5'd1);

assign scale_b2_cast_fu_241_p1 = scale_b2_fu_229_p3;

assign scale_b2_fu_229_p3 = ((color_correct_V[0:0] === 1'b1) ? scale_b_cast1_fu_217_p1 : lut_perceptual_brigh_1_q0);

assign scale_b_cast1_fu_217_p1 = lut_perceptual_brigh_2_q0;

assign scale_g2_cast_fu_237_p1 = scale_g2_fu_221_p3;

assign scale_g2_fu_221_p3 = ((color_correct_V[0:0] === 1'b1) ? scale_g_cast2_fu_213_p1 : lut_perceptual_brigh_1_q0);

assign scale_g_cast2_fu_213_p1 = lut_perceptual_brigh_q0;

assign scale_r_cast_fu_209_p1 = lut_perceptual_brigh_1_q0;

assign start_out = real_start;

assign tmp_fu_202_p1 = brightness_index_V;

always @ (posedge ap_clk) begin
    scale_r_cast_reg_338[31:9] <= 23'b00000000000000000000000;
    scale_g2_cast_reg_343[31:9] <= 23'b00000000000000000000000;
    scale_b2_cast_reg_348[31:9] <= 23'b00000000000000000000000;
end

endmodule //brightness_color_adj
