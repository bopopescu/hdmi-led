-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_loop_height_pro_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_crop_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_crop_data_stream_0_V_empty_n : IN STD_LOGIC;
    img_crop_data_stream_0_V_read : OUT STD_LOGIC;
    img_crop_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_crop_data_stream_1_V_empty_n : IN STD_LOGIC;
    img_crop_data_stream_1_V_read : OUT STD_LOGIC;
    img_crop_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_crop_data_stream_2_V_empty_n : IN STD_LOGIC;
    img_crop_data_stream_2_V_read : OUT STD_LOGIC;
    img_nogamma_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_nogamma_data_stream_0_V_full_n : IN STD_LOGIC;
    img_nogamma_data_stream_0_V_write : OUT STD_LOGIC;
    img_nogamma_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_nogamma_data_stream_1_V_full_n : IN STD_LOGIC;
    img_nogamma_data_stream_1_V_write : OUT STD_LOGIC;
    img_nogamma_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    img_nogamma_data_stream_2_V_full_n : IN STD_LOGIC;
    img_nogamma_data_stream_2_V_write : OUT STD_LOGIC );
end;


architecture behav of Loop_loop_height_pro_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_3C0 : STD_LOGIC_VECTOR (9 downto 0) := "1111000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal lut_srgb_decode_ce0 : STD_LOGIC;
    signal lut_srgb_decode_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_srgb_decode_ce1 : STD_LOGIC;
    signal lut_srgb_decode_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_srgb_decode_ce2 : STD_LOGIC;
    signal lut_srgb_decode_q2 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_crop_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i4_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_crop_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_crop_data_stream_2_V_blk_n : STD_LOGIC;
    signal img_nogamma_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal exitcond_i4_reg_225_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal img_nogamma_data_stream_1_V_blk_n : STD_LOGIC;
    signal img_nogamma_data_stream_2_V_blk_n : STD_LOGIC;
    signal t_V_1_reg_154 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond113_i_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_fu_171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_reg_220 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i4_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_i4_reg_225_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i4_reg_225_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_V_fu_183_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal lut_srgb_decode_addr_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_srgb_decode_addr_1_reg_239 : STD_LOGIC_VECTOR (7 downto 0);
    signal lut_srgb_decode_addr_2_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_reg_249 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_42_reg_254 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_reg_259 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal t_V_3_reg_143 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal tmp_30_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_1_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_2_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Loop_loop_height_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    lut_srgb_decode_U : component Loop_loop_height_bkb
    generic map (
        DataWidth => 12,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_srgb_decode_addr_reg_234,
        ce0 => lut_srgb_decode_ce0,
        q0 => lut_srgb_decode_q0,
        address1 => lut_srgb_decode_addr_1_reg_239,
        ce1 => lut_srgb_decode_ce1,
        q1 => lut_srgb_decode_q1,
        address2 => lut_srgb_decode_addr_2_reg_244,
        ce2 => lut_srgb_decode_ce2,
        q2 => lut_srgb_decode_q2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond113_i_fu_165_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond113_i_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((exitcond113_i_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i4_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                t_V_1_reg_154 <= c_V_fu_183_p2;
            elsif (((exitcond113_i_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_reg_154 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_3_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_3_reg_143 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_3_reg_143 <= r_V_reg_220;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_i4_reg_225 <= exitcond_i4_fu_177_p2;
                exitcond_i4_reg_225_pp0_iter1_reg <= exitcond_i4_reg_225;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_i4_reg_225_pp0_iter2_reg <= exitcond_i4_reg_225_pp0_iter1_reg;
                exitcond_i4_reg_225_pp0_iter3_reg <= exitcond_i4_reg_225_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lut_srgb_decode_addr_1_reg_239 <= tmp_39_1_fu_194_p1(8 - 1 downto 0);
                lut_srgb_decode_addr_2_reg_244 <= tmp_39_2_fu_199_p1(8 - 1 downto 0);
                lut_srgb_decode_addr_reg_234 <= tmp_30_fu_189_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_V_reg_220 <= r_V_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i4_reg_225_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_41_reg_249 <= lut_srgb_decode_q0;
                tmp_42_reg_254 <= lut_srgb_decode_q1;
                tmp_43_reg_259 <= lut_srgb_decode_q2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, exitcond113_i_fu_165_p2, ap_CS_fsm_state2, exitcond_i4_fu_177_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond113_i_fu_165_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i4_fu_177_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_i4_fu_177_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_crop_data_stream_0_V_empty_n, img_crop_data_stream_1_V_empty_n, img_crop_data_stream_2_V_empty_n, img_nogamma_data_stream_0_V_full_n, img_nogamma_data_stream_1_V_full_n, img_nogamma_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_crop_data_stream_0_V_empty_n, img_crop_data_stream_1_V_empty_n, img_crop_data_stream_2_V_empty_n, img_nogamma_data_stream_0_V_full_n, img_nogamma_data_stream_1_V_full_n, img_nogamma_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_crop_data_stream_0_V_empty_n, img_crop_data_stream_1_V_empty_n, img_crop_data_stream_2_V_empty_n, img_nogamma_data_stream_0_V_full_n, img_nogamma_data_stream_1_V_full_n, img_nogamma_data_stream_2_V_full_n, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_0_V_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(img_crop_data_stream_0_V_empty_n, img_crop_data_stream_1_V_empty_n, img_crop_data_stream_2_V_empty_n, exitcond_i4_reg_225)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_2_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_1_V_empty_n = ap_const_logic_0)) or ((exitcond_i4_reg_225 = ap_const_lv1_0) and (img_crop_data_stream_0_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(img_nogamma_data_stream_0_V_full_n, img_nogamma_data_stream_1_V_full_n, img_nogamma_data_stream_2_V_full_n, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_2_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_1_V_full_n = ap_const_logic_0)) or ((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (img_nogamma_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i4_fu_177_p2)
    begin
        if ((exitcond_i4_fu_177_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond113_i_fu_165_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond113_i_fu_165_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    c_V_fu_183_p2 <= std_logic_vector(unsigned(t_V_1_reg_154) + unsigned(ap_const_lv11_1));
    exitcond113_i_fu_165_p2 <= "1" when (t_V_3_reg_143 = ap_const_lv10_3C0) else "0";
    exitcond_i4_fu_177_p2 <= "1" when (t_V_1_reg_154 = ap_const_lv11_780) else "0";

    img_crop_data_stream_0_V_blk_n_assign_proc : process(img_crop_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i4_reg_225)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_crop_data_stream_0_V_blk_n <= img_crop_data_stream_0_V_empty_n;
        else 
            img_crop_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_crop_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_crop_data_stream_0_V_read <= ap_const_logic_1;
        else 
            img_crop_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_crop_data_stream_1_V_blk_n_assign_proc : process(img_crop_data_stream_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i4_reg_225)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_crop_data_stream_1_V_blk_n <= img_crop_data_stream_1_V_empty_n;
        else 
            img_crop_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_crop_data_stream_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_crop_data_stream_1_V_read <= ap_const_logic_1;
        else 
            img_crop_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_crop_data_stream_2_V_blk_n_assign_proc : process(img_crop_data_stream_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i4_reg_225)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_crop_data_stream_2_V_blk_n <= img_crop_data_stream_2_V_empty_n;
        else 
            img_crop_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_crop_data_stream_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i4_reg_225, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_crop_data_stream_2_V_read <= ap_const_logic_1;
        else 
            img_crop_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    img_nogamma_data_stream_0_V_blk_n_assign_proc : process(img_nogamma_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            img_nogamma_data_stream_0_V_blk_n <= img_nogamma_data_stream_0_V_full_n;
        else 
            img_nogamma_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_nogamma_data_stream_0_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_249),32));

    img_nogamma_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_nogamma_data_stream_0_V_write <= ap_const_logic_1;
        else 
            img_nogamma_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_nogamma_data_stream_1_V_blk_n_assign_proc : process(img_nogamma_data_stream_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            img_nogamma_data_stream_1_V_blk_n <= img_nogamma_data_stream_1_V_full_n;
        else 
            img_nogamma_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_nogamma_data_stream_1_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_reg_254),32));

    img_nogamma_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_nogamma_data_stream_1_V_write <= ap_const_logic_1;
        else 
            img_nogamma_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    img_nogamma_data_stream_2_V_blk_n_assign_proc : process(img_nogamma_data_stream_2_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            img_nogamma_data_stream_2_V_blk_n <= img_nogamma_data_stream_2_V_full_n;
        else 
            img_nogamma_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_nogamma_data_stream_2_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_259),32));

    img_nogamma_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter4, exitcond_i4_reg_225_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i4_reg_225_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_nogamma_data_stream_2_V_write <= ap_const_logic_1;
        else 
            img_nogamma_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond113_i_fu_165_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond113_i_fu_165_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lut_srgb_decode_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lut_srgb_decode_ce0 <= ap_const_logic_1;
        else 
            lut_srgb_decode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut_srgb_decode_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lut_srgb_decode_ce1 <= ap_const_logic_1;
        else 
            lut_srgb_decode_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut_srgb_decode_ce2_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            lut_srgb_decode_ce2 <= ap_const_logic_1;
        else 
            lut_srgb_decode_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_171_p2 <= std_logic_vector(unsigned(t_V_3_reg_143) + unsigned(ap_const_lv10_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_30_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_crop_data_stream_0_V_dout),64));
    tmp_39_1_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_crop_data_stream_1_V_dout),64));
    tmp_39_2_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_crop_data_stream_2_V_dout),64));
end behav;
