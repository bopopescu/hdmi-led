// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "brightness_color_adj.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic brightness_color_adj::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic brightness_color_adj::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state1 = "1";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state2 = "10";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state3 = "100";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state4 = "1000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state5 = "10000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state6 = "100000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> brightness_color_adj::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> brightness_color_adj::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> brightness_color_adj::ap_const_lv32_4 = "100";
const sc_lv<32> brightness_color_adj::ap_const_lv32_A = "1010";
const sc_lv<32> brightness_color_adj::ap_const_lv32_1 = "1";
const sc_lv<32> brightness_color_adj::ap_const_lv32_2 = "10";
const sc_lv<32> brightness_color_adj::ap_const_lv32_3 = "11";
const sc_lv<32> brightness_color_adj::ap_const_lv32_7 = "111";
const sc_lv<32> brightness_color_adj::ap_const_lv32_8 = "1000";
const sc_lv<32> brightness_color_adj::ap_const_lv32_9 = "1001";
const sc_lv<5> brightness_color_adj::ap_const_lv5_0 = "00000";
const sc_lv<32> brightness_color_adj::ap_const_lv32_B = "1011";
const sc_lv<6> brightness_color_adj::ap_const_lv6_0 = "000000";
const sc_lv<1> brightness_color_adj::ap_const_lv1_0 = "0";
const sc_lv<5> brightness_color_adj::ap_const_lv5_1E = "11110";
const sc_lv<5> brightness_color_adj::ap_const_lv5_1 = "1";
const sc_lv<6> brightness_color_adj::ap_const_lv6_3C = "111100";
const sc_lv<6> brightness_color_adj::ap_const_lv6_1 = "1";
const sc_lv<32> brightness_color_adj::ap_const_lv32_5 = "101";
const sc_lv<32> brightness_color_adj::ap_const_lv32_6 = "110";
const sc_lv<32> brightness_color_adj::ap_const_lv32_1F = "11111";
const sc_lv<1> brightness_color_adj::ap_const_lv1_1 = "1";
const bool brightness_color_adj::ap_const_boolean_1 = true;

brightness_color_adj::brightness_color_adj(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lut_perceptual_brigh_1_U = new brightness_color_fYi("lut_perceptual_brigh_1_U");
    lut_perceptual_brigh_1_U->clk(ap_clk);
    lut_perceptual_brigh_1_U->reset(ap_rst);
    lut_perceptual_brigh_1_U->address0(lut_perceptual_brigh_1_address0);
    lut_perceptual_brigh_1_U->ce0(lut_perceptual_brigh_1_ce0);
    lut_perceptual_brigh_1_U->q0(lut_perceptual_brigh_1_q0);
    lut_perceptual_brigh_U = new brightness_color_g8j("lut_perceptual_brigh_U");
    lut_perceptual_brigh_U->clk(ap_clk);
    lut_perceptual_brigh_U->reset(ap_rst);
    lut_perceptual_brigh_U->address0(lut_perceptual_brigh_address0);
    lut_perceptual_brigh_U->ce0(lut_perceptual_brigh_ce0);
    lut_perceptual_brigh_U->q0(lut_perceptual_brigh_q0);
    lut_perceptual_brigh_2_U = new brightness_color_hbi("lut_perceptual_brigh_2_U");
    lut_perceptual_brigh_2_U->clk(ap_clk);
    lut_perceptual_brigh_2_U->reset(ap_rst);
    lut_perceptual_brigh_2_U->address0(lut_perceptual_brigh_2_address0);
    lut_perceptual_brigh_2_U->ce0(lut_perceptual_brigh_2_ce0);
    lut_perceptual_brigh_2_U->q0(lut_perceptual_brigh_2_q0);
    hls_video_processibs_U40 = new hls_video_processibs<1,3,32,9,32>("hls_video_processibs_U40");
    hls_video_processibs_U40->clk(ap_clk);
    hls_video_processibs_U40->reset(ap_rst);
    hls_video_processibs_U40->din0(tmp_32_reg_370);
    hls_video_processibs_U40->din1(grp_fu_269_p1);
    hls_video_processibs_U40->ce(ap_var_for_const0);
    hls_video_processibs_U40->dout(grp_fu_269_p2);
    hls_video_processibs_U41 = new hls_video_processibs<1,3,32,9,32>("hls_video_processibs_U41");
    hls_video_processibs_U41->clk(ap_clk);
    hls_video_processibs_U41->reset(ap_rst);
    hls_video_processibs_U41->din0(tmp_33_reg_375);
    hls_video_processibs_U41->din1(grp_fu_273_p1);
    hls_video_processibs_U41->ce(ap_var_for_const0);
    hls_video_processibs_U41->dout(grp_fu_273_p2);
    hls_video_processibs_U42 = new hls_video_processibs<1,3,32,9,32>("hls_video_processibs_U42");
    hls_video_processibs_U42->clk(ap_clk);
    hls_video_processibs_U42->reset(ap_rst);
    hls_video_processibs_U42->din0(tmp_31_reg_380);
    hls_video_processibs_U42->din1(grp_fu_287_p1);
    hls_video_processibs_U42->ce(ap_var_for_const0);
    hls_video_processibs_U42->dout(grp_fu_287_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( exitcond4_fu_245_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_c_V_fu_263_p2);
    sensitive << ( t_V_3_reg_191 );

    SC_METHOD(thread_dst_data_stream_0_V_blk_n);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dst_data_stream_0_V_din);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_19_reg_385 );

    SC_METHOD(thread_dst_data_stream_0_V_write);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dst_data_stream_1_V_blk_n);
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dst_data_stream_1_V_din);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_22_reg_390 );

    SC_METHOD(thread_dst_data_stream_1_V_write);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dst_data_stream_2_V_blk_n);
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_dst_data_stream_2_V_din);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_25_reg_395 );

    SC_METHOD(thread_dst_data_stream_2_V_write);
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_exitcond4_fu_245_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( t_V_reg_180 );

    SC_METHOD(thread_exitcond_fu_257_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( t_V_3_reg_191 );

    SC_METHOD(thread_grp_fu_269_p1);
    sensitive << ( scale_g2_cast_reg_343 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_grp_fu_273_p1);
    sensitive << ( scale_b2_cast_reg_348 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_287_p1);
    sensitive << ( scale_r_cast_reg_338 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( exitcond4_fu_245_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_lut_perceptual_brigh_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_202_p1 );

    SC_METHOD(thread_lut_perceptual_brigh_1_ce0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lut_perceptual_brigh_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_202_p1 );

    SC_METHOD(thread_lut_perceptual_brigh_2_ce0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lut_perceptual_brigh_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_202_p1 );

    SC_METHOD(thread_lut_perceptual_brigh_ce0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_r_V_fu_251_p2);
    sensitive << ( t_V_reg_180 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_scale_b2_cast_fu_241_p1);
    sensitive << ( scale_b2_fu_229_p3 );

    SC_METHOD(thread_scale_b2_fu_229_p3);
    sensitive << ( color_correct_V );
    sensitive << ( lut_perceptual_brigh_1_q0 );
    sensitive << ( scale_b_cast1_fu_217_p1 );

    SC_METHOD(thread_scale_b_cast1_fu_217_p1);
    sensitive << ( lut_perceptual_brigh_2_q0 );

    SC_METHOD(thread_scale_g2_cast_fu_237_p1);
    sensitive << ( scale_g2_fu_221_p3 );

    SC_METHOD(thread_scale_g2_fu_221_p3);
    sensitive << ( color_correct_V );
    sensitive << ( lut_perceptual_brigh_1_q0 );
    sensitive << ( scale_g_cast2_fu_213_p1 );

    SC_METHOD(thread_scale_g_cast2_fu_213_p1);
    sensitive << ( lut_perceptual_brigh_q0 );

    SC_METHOD(thread_scale_r_cast_fu_209_p1);
    sensitive << ( lut_perceptual_brigh_1_q0 );

    SC_METHOD(thread_src_data_stream_0_V_blk_n);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_data_stream_0_V_read);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_data_stream_1_V_blk_n);
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_data_stream_1_V_read);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_data_stream_2_V_blk_n);
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_data_stream_2_V_read);
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_fu_202_p1);
    sensitive << ( brightness_index_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( src_data_stream_0_V_empty_n );
    sensitive << ( src_data_stream_1_V_empty_n );
    sensitive << ( src_data_stream_2_V_empty_n );
    sensitive << ( dst_data_stream_0_V_full_n );
    sensitive << ( dst_data_stream_1_V_full_n );
    sensitive << ( dst_data_stream_2_V_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( exitcond4_fu_245_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_257_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "brightness_color_adj_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, src_data_stream_0_V_dout, "(port)src_data_stream_0_V_dout");
    sc_trace(mVcdFile, src_data_stream_0_V_empty_n, "(port)src_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_0_V_read, "(port)src_data_stream_0_V_read");
    sc_trace(mVcdFile, src_data_stream_1_V_dout, "(port)src_data_stream_1_V_dout");
    sc_trace(mVcdFile, src_data_stream_1_V_empty_n, "(port)src_data_stream_1_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_1_V_read, "(port)src_data_stream_1_V_read");
    sc_trace(mVcdFile, src_data_stream_2_V_dout, "(port)src_data_stream_2_V_dout");
    sc_trace(mVcdFile, src_data_stream_2_V_empty_n, "(port)src_data_stream_2_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_2_V_read, "(port)src_data_stream_2_V_read");
    sc_trace(mVcdFile, dst_data_stream_0_V_din, "(port)dst_data_stream_0_V_din");
    sc_trace(mVcdFile, dst_data_stream_0_V_full_n, "(port)dst_data_stream_0_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_write, "(port)dst_data_stream_0_V_write");
    sc_trace(mVcdFile, dst_data_stream_1_V_din, "(port)dst_data_stream_1_V_din");
    sc_trace(mVcdFile, dst_data_stream_1_V_full_n, "(port)dst_data_stream_1_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_1_V_write, "(port)dst_data_stream_1_V_write");
    sc_trace(mVcdFile, dst_data_stream_2_V_din, "(port)dst_data_stream_2_V_din");
    sc_trace(mVcdFile, dst_data_stream_2_V_full_n, "(port)dst_data_stream_2_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_2_V_write, "(port)dst_data_stream_2_V_write");
    sc_trace(mVcdFile, brightness_index_V, "(port)brightness_index_V");
    sc_trace(mVcdFile, color_correct_V, "(port)color_correct_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, lut_perceptual_brigh_1_address0, "lut_perceptual_brigh_1_address0");
    sc_trace(mVcdFile, lut_perceptual_brigh_1_ce0, "lut_perceptual_brigh_1_ce0");
    sc_trace(mVcdFile, lut_perceptual_brigh_1_q0, "lut_perceptual_brigh_1_q0");
    sc_trace(mVcdFile, lut_perceptual_brigh_address0, "lut_perceptual_brigh_address0");
    sc_trace(mVcdFile, lut_perceptual_brigh_ce0, "lut_perceptual_brigh_ce0");
    sc_trace(mVcdFile, lut_perceptual_brigh_q0, "lut_perceptual_brigh_q0");
    sc_trace(mVcdFile, lut_perceptual_brigh_2_address0, "lut_perceptual_brigh_2_address0");
    sc_trace(mVcdFile, lut_perceptual_brigh_2_ce0, "lut_perceptual_brigh_2_ce0");
    sc_trace(mVcdFile, lut_perceptual_brigh_2_q0, "lut_perceptual_brigh_2_q0");
    sc_trace(mVcdFile, src_data_stream_0_V_blk_n, "src_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, src_data_stream_1_V_blk_n, "src_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, src_data_stream_2_V_blk_n, "src_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_blk_n, "dst_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, dst_data_stream_1_V_blk_n, "dst_data_stream_1_V_blk_n");
    sc_trace(mVcdFile, dst_data_stream_2_V_blk_n, "dst_data_stream_2_V_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, scale_r_cast_fu_209_p1, "scale_r_cast_fu_209_p1");
    sc_trace(mVcdFile, scale_r_cast_reg_338, "scale_r_cast_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, scale_g2_cast_fu_237_p1, "scale_g2_cast_fu_237_p1");
    sc_trace(mVcdFile, scale_g2_cast_reg_343, "scale_g2_cast_reg_343");
    sc_trace(mVcdFile, scale_b2_cast_fu_241_p1, "scale_b2_cast_fu_241_p1");
    sc_trace(mVcdFile, scale_b2_cast_reg_348, "scale_b2_cast_reg_348");
    sc_trace(mVcdFile, exitcond4_fu_245_p2, "exitcond4_fu_245_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, r_V_fu_251_p2, "r_V_fu_251_p2");
    sc_trace(mVcdFile, r_V_reg_357, "r_V_reg_357");
    sc_trace(mVcdFile, c_V_fu_263_p2, "c_V_fu_263_p2");
    sc_trace(mVcdFile, c_V_reg_365, "c_V_reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_32_reg_370, "tmp_32_reg_370");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, tmp_33_reg_375, "tmp_33_reg_375");
    sc_trace(mVcdFile, tmp_31_reg_380, "tmp_31_reg_380");
    sc_trace(mVcdFile, tmp_19_reg_385, "tmp_19_reg_385");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_22_reg_390, "tmp_22_reg_390");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_25_reg_395, "tmp_25_reg_395");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, t_V_reg_180, "t_V_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, t_V_3_reg_191, "t_V_3_reg_191");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, tmp_fu_202_p1, "tmp_fu_202_p1");
    sc_trace(mVcdFile, scale_g_cast2_fu_213_p1, "scale_g_cast2_fu_213_p1");
    sc_trace(mVcdFile, scale_b_cast1_fu_217_p1, "scale_b_cast1_fu_217_p1");
    sc_trace(mVcdFile, scale_g2_fu_221_p3, "scale_g2_fu_221_p3");
    sc_trace(mVcdFile, scale_b2_fu_229_p3, "scale_b2_fu_229_p3");
    sc_trace(mVcdFile, grp_fu_269_p1, "grp_fu_269_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_273_p1, "grp_fu_273_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_269_p2, "grp_fu_269_p2");
    sc_trace(mVcdFile, grp_fu_287_p1, "grp_fu_287_p1");
    sc_trace(mVcdFile, grp_fu_273_p2, "grp_fu_273_p2");
    sc_trace(mVcdFile, grp_fu_287_p2, "grp_fu_287_p2");
    sc_trace(mVcdFile, exitcond_fu_257_p2, "exitcond_fu_257_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

brightness_color_adj::~brightness_color_adj() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete lut_perceptual_brigh_1_U;
    delete lut_perceptual_brigh_U;
    delete lut_perceptual_brigh_2_U;
    delete hls_video_processibs_U40;
    delete hls_video_processibs_U41;
    delete hls_video_processibs_U42;
}

void brightness_color_adj::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void brightness_color_adj::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(exitcond4_fu_245_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())))) {
        t_V_3_reg_191 = c_V_reg_365.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond4_fu_245_p2.read(), ap_const_lv1_0))) {
        t_V_3_reg_191 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        t_V_reg_180 = r_V_reg_357.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_V_reg_180 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_V_reg_365 = c_V_fu_263_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        r_V_reg_357 = r_V_fu_251_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        scale_b2_cast_reg_348 = scale_b2_cast_fu_241_p1.read();
        scale_g2_cast_reg_343 = scale_g2_cast_fu_237_p1.read();
        scale_r_cast_reg_338 = scale_r_cast_fu_209_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_19_reg_385 = grp_fu_269_p2.read().range(31, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_22_reg_390 = grp_fu_273_p2.read().range(31, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_25_reg_395 = grp_fu_287_p2.read().range(31, 8);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())))) {
        tmp_31_reg_380 = src_data_stream_2_V_dout.read();
        tmp_32_reg_370 = src_data_stream_0_V_dout.read();
        tmp_33_reg_375 = src_data_stream_1_V_dout.read();
    }
}

void brightness_color_adj::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void brightness_color_adj::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void brightness_color_adj::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void brightness_color_adj::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void brightness_color_adj::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void brightness_color_adj::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void brightness_color_adj::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void brightness_color_adj::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void brightness_color_adj::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void brightness_color_adj::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void brightness_color_adj::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void brightness_color_adj::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void brightness_color_adj::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void brightness_color_adj::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read()));
}

void brightness_color_adj::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read()));
}

void brightness_color_adj::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_245_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void brightness_color_adj::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void brightness_color_adj::thread_c_V_fu_263_p2() {
    c_V_fu_263_p2 = (!t_V_3_reg_191.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(t_V_3_reg_191.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void brightness_color_adj::thread_dst_data_stream_0_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n.read();
    } else {
        dst_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_dst_data_stream_0_V_din() {
    dst_data_stream_0_V_din = esl_sext<32,24>(tmp_19_reg_385.read());
}

void brightness_color_adj::thread_dst_data_stream_0_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())))) {
        dst_data_stream_0_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_0_V_write = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_dst_data_stream_1_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n.read();
    } else {
        dst_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_dst_data_stream_1_V_din() {
    dst_data_stream_1_V_din = esl_sext<32,24>(tmp_22_reg_390.read());
}

void brightness_color_adj::thread_dst_data_stream_1_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())))) {
        dst_data_stream_1_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_1_V_write = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_dst_data_stream_2_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n.read();
    } else {
        dst_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_dst_data_stream_2_V_din() {
    dst_data_stream_2_V_din = esl_sext<32,24>(tmp_25_reg_395.read());
}

void brightness_color_adj::thread_dst_data_stream_2_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())))) {
        dst_data_stream_2_V_write = ap_const_logic_1;
    } else {
        dst_data_stream_2_V_write = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_exitcond4_fu_245_p2() {
    exitcond4_fu_245_p2 = (!t_V_reg_180.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_180.read() == ap_const_lv5_1E);
}

void brightness_color_adj::thread_exitcond_fu_257_p2() {
    exitcond_fu_257_p2 = (!t_V_3_reg_191.read().is_01() || !ap_const_lv6_3C.is_01())? sc_lv<1>(): sc_lv<1>(t_V_3_reg_191.read() == ap_const_lv6_3C);
}

void brightness_color_adj::thread_grp_fu_269_p1() {
    grp_fu_269_p1 =  (sc_lv<9>) (scale_g2_cast_reg_343.read());
}

void brightness_color_adj::thread_grp_fu_273_p1() {
    grp_fu_273_p1 =  (sc_lv<9>) (scale_b2_cast_reg_348.read());
}

void brightness_color_adj::thread_grp_fu_287_p1() {
    grp_fu_287_p1 =  (sc_lv<9>) (scale_r_cast_reg_338.read());
}

void brightness_color_adj::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond4_fu_245_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_lut_perceptual_brigh_1_address0() {
    lut_perceptual_brigh_1_address0 =  (sc_lv<4>) (tmp_fu_202_p1.read());
}

void brightness_color_adj::thread_lut_perceptual_brigh_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        lut_perceptual_brigh_1_ce0 = ap_const_logic_1;
    } else {
        lut_perceptual_brigh_1_ce0 = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_lut_perceptual_brigh_2_address0() {
    lut_perceptual_brigh_2_address0 =  (sc_lv<4>) (tmp_fu_202_p1.read());
}

void brightness_color_adj::thread_lut_perceptual_brigh_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        lut_perceptual_brigh_2_ce0 = ap_const_logic_1;
    } else {
        lut_perceptual_brigh_2_ce0 = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_lut_perceptual_brigh_address0() {
    lut_perceptual_brigh_address0 =  (sc_lv<4>) (tmp_fu_202_p1.read());
}

void brightness_color_adj::thread_lut_perceptual_brigh_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        lut_perceptual_brigh_ce0 = ap_const_logic_1;
    } else {
        lut_perceptual_brigh_ce0 = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_r_V_fu_251_p2() {
    r_V_fu_251_p2 = (!t_V_reg_180.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(t_V_reg_180.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void brightness_color_adj::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void brightness_color_adj::thread_scale_b2_cast_fu_241_p1() {
    scale_b2_cast_fu_241_p1 = esl_zext<32,9>(scale_b2_fu_229_p3.read());
}

void brightness_color_adj::thread_scale_b2_fu_229_p3() {
    scale_b2_fu_229_p3 = (!color_correct_V.read()[0].is_01())? sc_lv<9>(): ((color_correct_V.read()[0].to_bool())? scale_b_cast1_fu_217_p1.read(): lut_perceptual_brigh_1_q0.read());
}

void brightness_color_adj::thread_scale_b_cast1_fu_217_p1() {
    scale_b_cast1_fu_217_p1 = esl_zext<9,8>(lut_perceptual_brigh_2_q0.read());
}

void brightness_color_adj::thread_scale_g2_cast_fu_237_p1() {
    scale_g2_cast_fu_237_p1 = esl_zext<32,9>(scale_g2_fu_221_p3.read());
}

void brightness_color_adj::thread_scale_g2_fu_221_p3() {
    scale_g2_fu_221_p3 = (!color_correct_V.read()[0].is_01())? sc_lv<9>(): ((color_correct_V.read()[0].to_bool())? scale_g_cast2_fu_213_p1.read(): lut_perceptual_brigh_1_q0.read());
}

void brightness_color_adj::thread_scale_g_cast2_fu_213_p1() {
    scale_g_cast2_fu_213_p1 = esl_zext<9,8>(lut_perceptual_brigh_q0.read());
}

void brightness_color_adj::thread_scale_r_cast_fu_209_p1() {
    scale_r_cast_fu_209_p1 = esl_zext<32,9>(lut_perceptual_brigh_1_q0.read());
}

void brightness_color_adj::thread_src_data_stream_0_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n.read();
    } else {
        src_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_src_data_stream_0_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())))) {
        src_data_stream_0_V_read = ap_const_logic_1;
    } else {
        src_data_stream_0_V_read = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_src_data_stream_1_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n.read();
    } else {
        src_data_stream_1_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_src_data_stream_1_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())))) {
        src_data_stream_1_V_read = ap_const_logic_1;
    } else {
        src_data_stream_1_V_read = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_src_data_stream_2_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n.read();
    } else {
        src_data_stream_2_V_blk_n = ap_const_logic_1;
    }
}

void brightness_color_adj::thread_src_data_stream_2_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())))) {
        src_data_stream_2_V_read = ap_const_logic_1;
    } else {
        src_data_stream_2_V_read = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_start_out() {
    start_out = real_start.read();
}

void brightness_color_adj::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void brightness_color_adj::thread_tmp_fu_202_p1() {
    tmp_fu_202_p1 = esl_zext<64,4>(brightness_index_V.read());
}

void brightness_color_adj::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond4_fu_245_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_257_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_1_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, src_data_stream_2_V_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_0_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_1_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_data_stream_2_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

}

