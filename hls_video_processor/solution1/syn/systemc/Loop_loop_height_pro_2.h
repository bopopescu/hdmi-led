// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_loop_height_pro_2_HH_
#define _Loop_loop_height_pro_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_loop_height_pro_2 : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<12> > img_input_cols_V_c20_dout;
    sc_in< sc_logic > img_input_cols_V_c20_empty_n;
    sc_out< sc_logic > img_input_cols_V_c20_read;
    sc_in< sc_lv<12> > extLd_loc_channel;
    sc_in< sc_lv<8> > img_input_data_strea_dout;
    sc_in< sc_logic > img_input_data_strea_empty_n;
    sc_out< sc_logic > img_input_data_strea_read;
    sc_in< sc_lv<8> > img_input_data_strea_1_dout;
    sc_in< sc_logic > img_input_data_strea_1_empty_n;
    sc_out< sc_logic > img_input_data_strea_1_read;
    sc_in< sc_lv<8> > img_input_data_strea_2_dout;
    sc_in< sc_logic > img_input_data_strea_2_empty_n;
    sc_out< sc_logic > img_input_data_strea_2_read;
    sc_out< sc_lv<8> > img_crop_data_stream_din;
    sc_in< sc_logic > img_crop_data_stream_full_n;
    sc_out< sc_logic > img_crop_data_stream_write;
    sc_out< sc_lv<8> > img_crop_data_stream_1_din;
    sc_in< sc_logic > img_crop_data_stream_1_full_n;
    sc_out< sc_logic > img_crop_data_stream_1_write;
    sc_out< sc_lv<8> > img_crop_data_stream_2_din;
    sc_in< sc_logic > img_crop_data_stream_2_full_n;
    sc_out< sc_logic > img_crop_data_stream_2_write;


    // Module declarations
    Loop_loop_height_pro_2(sc_module_name name);
    SC_HAS_PROCESS(Loop_loop_height_pro_2);

    ~Loop_loop_height_pro_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > img_input_cols_V_c20_blk_n;
    sc_signal< sc_logic > img_input_data_strea_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > img_input_data_strea_1_blk_n;
    sc_signal< sc_logic > img_input_data_strea_2_blk_n;
    sc_signal< sc_logic > img_crop_data_stream_blk_n;
    sc_signal< sc_lv<1> > or_cond_i_i_i_i_reg_211;
    sc_signal< sc_logic > img_crop_data_stream_1_blk_n;
    sc_signal< sc_logic > img_crop_data_stream_2_blk_n;
    sc_signal< sc_lv<32> > t_V_4_reg_133;
    sc_signal< sc_lv<32> > p_read_cast_i_fu_144_p1;
    sc_signal< sc_lv<32> > p_read_cast_i_reg_192;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > cols_V_fu_148_p1;
    sc_signal< sc_lv<32> > cols_V_reg_197;
    sc_signal< sc_lv<1> > exitcond89_i_i_i_i_fu_152_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > r_V_fu_157_p2;
    sc_signal< sc_lv<32> > r_V_reg_206;
    sc_signal< sc_lv<1> > or_cond_i_i_i_i_fu_175_p2;
    sc_signal< sc_lv<1> > exitcond_i_i_i_i_fu_181_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > c_V_fu_186_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<32> > t_V_reg_122;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_i_i_i_fu_163_p2;
    sc_signal< sc_lv<1> > tmp_i_i_i_59_fu_169_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_3B;
    static const sc_lv<32> ap_const_lv32_3FC;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_c_V_fu_186_p2();
    void thread_cols_V_fu_148_p1();
    void thread_exitcond89_i_i_i_i_fu_152_p2();
    void thread_exitcond_i_i_i_i_fu_181_p2();
    void thread_img_crop_data_stream_1_blk_n();
    void thread_img_crop_data_stream_1_din();
    void thread_img_crop_data_stream_1_write();
    void thread_img_crop_data_stream_2_blk_n();
    void thread_img_crop_data_stream_2_din();
    void thread_img_crop_data_stream_2_write();
    void thread_img_crop_data_stream_blk_n();
    void thread_img_crop_data_stream_din();
    void thread_img_crop_data_stream_write();
    void thread_img_input_cols_V_c20_blk_n();
    void thread_img_input_cols_V_c20_read();
    void thread_img_input_data_strea_1_blk_n();
    void thread_img_input_data_strea_1_read();
    void thread_img_input_data_strea_2_blk_n();
    void thread_img_input_data_strea_2_read();
    void thread_img_input_data_strea_blk_n();
    void thread_img_input_data_strea_read();
    void thread_internal_ap_ready();
    void thread_or_cond_i_i_i_i_fu_175_p2();
    void thread_p_read_cast_i_fu_144_p1();
    void thread_r_V_fu_157_p2();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_i_i_i_59_fu_169_p2();
    void thread_tmp_i_i_i_fu_163_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
